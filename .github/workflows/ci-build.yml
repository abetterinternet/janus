name: ci-build

on:
  push:
    branches: [ main, release/** ]
  pull_request:
  workflow_dispatch:
    inputs:
      divviup_ts_interop_container:
        description: divviup-ts container image tag for use in integration tests
        required: false
        type: string

jobs:
  janus_build:
    runs-on: ubuntu-latest
    permissions:
      id-token: "write"
      contents: "read"
    env:
      CARGO_INCREMENTAL: 0
      CARGO_TERM_COLOR: always
      DAPHNE_INTEROP_CONTAINER: prebuilt=${{ secrets.DAPHNE_PREBUILT_IMAGE_NAME_AND_TAG }}
      RUSTFLAGS: "-D warnings"
    steps:
    - name: Set default input values
      id: default-input-values
      run: |
        DIVVIUP_TS_INTEROP_CONTAINER= ${{ inputs.divviup_ts_interop_container }}
        echo "divviup_ts_interop_container=${DIVVIUP_TS_INTEROP_CONTAINER:-us-west2-docker.pkg.dev/divviup-artifacts-public/divviup-ts/divviup_ts_interop_client:dap-draft-02@sha256:dc4c111adce5719fef9d231f79aecb842c3f626d51363b04355e987d6a40aadc}" >> $GITHUB_OUTPUT
    - name: Get OS version
      id: os-version
      run: echo "release=$(lsb_release --release --short)" >> $GITHUB_OUTPUT
    - uses: actions/checkout@v3
    # See https://github.com/google-github-actions/auth#authenticating-to-container-registry-and-artifact-registry
    - id: "gcp-auth"
      name: "Authenticate to GCP"
      uses: "google-github-actions/auth@v1"
      with:
        workload_identity_provider: ${{ secrets.GCP_ARTIFACT_READER_WORKFLOW_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_ARTIFACT_READER_SERVICE_ACCOUNT }}
        token_format: "access_token"
        access_token_lifetime: "3600s"
        access_token_scopes: "https://www.googleapis.com/auth/cloud-platform"
        export_environment_variables: true
    - uses: "docker/login-action@v2"
      with:
        registry: "us-west2-docker.pkg.dev"
        username: "oauth2accesstoken"
        password: ${{ steps.gcp-auth.outputs.access_token }}
    - name: Setup Go toolchain
      uses: actions/setup-go@v3
    - name: Install Kind
      # We should always make sure that the `kind` CLI we install is from the
      # same release as the node image version used by
      # `janus_core::test_util::kubernetes::EphemeralCluster`
      run: go install sigs.k8s.io/kind@v0.14.0
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ steps.os-version.outputs.release }}
    - name: Build
      run: cargo test --no-run --locked --all-targets
    - name: Build minimal janus_messages
      run: cargo build --package janus_messages --no-default-features
    - name: Test
      id: test
      env:
        JANUS_E2E_LOGS_PATH: ${{ github.workspace }}/test-logs
        DIVVIUP_TS_INTEROP_CONTAINER: ${{ steps.default-input-values.outputs.divviup_ts_interop_container }}
      run: cargo test --all-targets
      # Continue on error so we can upload logs
      continue-on-error: true
    - name: Upload container logs
      # Only get logs on test failure
      if: steps.test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: container-logs
        path: ${{ github.workspace }}/test-logs/
        # Not all test failures yield log files
        if-no-files-found: ignore
    # Force overall job to fail if tests fail
    - name: test status
      if: steps.test.outcome == 'failure'
      run: exit 1
  
  janus_lints:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
      CARGO_TERM_COLOR: always
      DAPHNE_INTEROP_CONTAINER: skip
      JANUS_INTEROP_CONTAINER: skip
      RUSTDOCFLAGS: "-D warnings"
      RUSTFLAGS: "-D warnings"
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Format
      run: cargo fmt --message-format human -- --check
    - name: Clippy
      run: cargo clippy --workspace --all-targets
    - name: Clippy (all features)
      run: cargo clippy --workspace --all-targets --all-features
    - name: Document
      run: cargo doc --workspace

  janus_docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
    - uses: actions/checkout@v3
    - run: docker build --tag janus_aggregator .
    - run: docker build --tag janus_aggregation_job_creator --build-arg BINARY=aggregation_job_creator .
    - run: docker build --tag janus_aggregation_job_driver --build-arg BINARY=aggregation_job_driver .
    - run: docker build --tag janus_collect_job_driver --build-arg BINARY=collect_job_driver .
    - run: docker build --tag janus_cli --build-arg BINARY=janus_cli .
    - run: docker run --rm janus_aggregator --help
    - run: docker run --rm janus_aggregation_job_creator --help
    - run: docker run --rm janus_aggregation_job_driver --help
    - run: docker run --rm janus_collect_job_driver --help
    - run: docker run --rm janus_cli --help

  janus_interop_docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    steps:
    - uses: actions/checkout@v3
    - run: docker build --tag janus_interop_client --build-arg BINARY=janus_interop_client -f Dockerfile.interop .
    - run: docker build --tag janus_interop_aggregator -f Dockerfile.interop_aggregator .
    - run: docker build --tag janus_interop_collector --build-arg BINARY=janus_interop_collector -f Dockerfile.interop .
