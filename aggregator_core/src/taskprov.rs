//! Common utilities for extension [draft-wang-ppm-dap-taskprov][1].
//! [1]: https://datatracker.ietf.org/doc/draft-wang-ppm-dap-taskprov/

use janus_messages::TaskId;
use lazy_static::lazy_static;
use ring::hkdf::{Salt, HKDF_SHA256};

use crate::task::VerifyKey;

lazy_static! {
    /// Salt generated by the SHA256 of the string 'dap-taskprov". See [taskprov section 3.2][1].
    /// [1]: https://www.ietf.org/archive/id/draft-wang-ppm-dap-taskprov-01.html#name-deriving-the-vdaf-verificat
    pub static ref SALT: Salt = Salt::new(
        HKDF_SHA256,
        &[
            // SHA256 of the string "dap-taskprov".
            0x28, 0xb9, 0xbb, 0x4f, 0x62, 0x4f, 0x67, 0x9a, 0xc1, 0x98, 0xd9, 0x68, 0xf4, 0xb0,
            0x9e, 0xec, 0x74, 0x1, 0x7a, 0x52, 0xcb, 0x4c, 0xf6, 0x39, 0xfb, 0x83, 0xe0, 0x47,
            0x72, 0x3a, 0xf, 0xfe,
        ]
    );
}

pub fn derive_vdaf_verify_key<const SEED_SIZE: usize>(
    verify_key_init: &[u8; 32],
    task_id: &TaskId,
) -> VerifyKey<SEED_SIZE> {
    // SALT.extract(verify_key_init)
    //     .expand(&[task_id.as_ref()], SEED_SIZE);

    todo!()
}
